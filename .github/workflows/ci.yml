name: CI

on:
  push:
    branches:
    - master
    - '[0-9].[0-9]+'    # matches to backport branches, e.g. 3.6
    tags: [v*]
  pull_request:


env:
  COLOR: >-  # Supposedly, pytest or coveragepy use this
    yes
  FORCE_COLOR: 1  # Request colored output from CLI tools supporting it
  MYPY_FORCE_COLOR: 1  # MyPy's color enforcement
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1
  PRE_COMMIT_COLOR: always
  PROJECT_NAME: aiosignal
  PY_COLORS: 1  # Recognized by the `py` package, dependency of `pytest`
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1


jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
        cache: pip
        cache-dependency-path: |
          requirements/*.txt
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/dev.txt
    - name: Install itself
      run: |
        pip install .
    - name: Run linter
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-2-dev
        pip install -r requirements/doc-spelling.txt
        pip install -r requirements/towncrier.txt
    - name: Run docs spelling
      run: |
        towncrier build --yes --version 99.99.99
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine build
        python -m build
      env:
        FROZENLIST_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*
    - name: Make sure that CONTRIBUTORS.txt remains sorted
      run: |
        LC_ALL=C sort -c CONTRIBUTORS.txt

  test:
    name: Test
    strategy:
      matrix:
        pyver: ['3.9', '3.10', '3.11', '3.12', '3.13']
      fail-fast: false
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.pyver }}
        cache: pip
        cache-dependency-path: |
          requirements/*.txt
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v4
      with:
        path: requirements/ci-bot.txt
    - name: Run unittests
      env:
        COLOR: yes
      run: |
        python -m pytest tests -vv
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  test-summary:
    name: Test matrix status
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: always()
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for trusted publishing & sigstore
    environment:
      name: pypi
      url: https://pypi.org/p/${{ env.PROJECT_NAME }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.13
    - name: Install dependencies
      run: python -m pip install -U pip wheel build
    - name: Make dists
      run: python -m build

    - name: Login
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
    - name: Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: aiosignal
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_TOKEN }}
        artifact: ''
        version_file: aiosignal/__init__.py
        fix_issue_regex: "\n?\\s*`#(\\d+) <https://github.com/aio-libs/aiosignal/issues/\\1>`_"
        fix_issue_repl: ' (#\1)'

    - name: >-
        Publish 🐍📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v3.0.0
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Upload artifact signatures to GitHub Release
      # Confusingly, this action also supports updating releases, not
      # just creating them. This is what we want here, since we've manually
      # created the release above.
      uses: softprops/action-gh-release@v2
      with:
        # dist/ contains the built packages, which smoketest-artifacts/
        # contains the signatures and certificates.
        files: dist/**
