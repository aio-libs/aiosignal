---
name: CI

on:
  push:
    branches:
    - master
    - '[0-9].[0-9]+'    # matches to backport branches, e.g. 3.6
    tags: [v*]
  pull_request:
    branches:
    - master
    - '[0-9].[0-9]+'
  schedule:
  - cron: 0 6 * * *       # Daily 6AM UTC build


jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v3
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
          pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v3
      with:
        path: requirements/dev.txt
    - name: Install itself
      run: |
        pip install .
    - name: Run linter
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-dev
        pip install -r requirements/doc-spelling.txt
        pip install -r requirements/towncrier.txt
    - name: Run docs spelling
      run: |
        towncrier --yes
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine build
        python -m build
      env:
        FROZENLIST_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*
    - name: Make sure that CONTRIBUTORS.txt remains sorted
      run: |
        LC_ALL=C sort -c CONTRIBUTORS.txt

  test:
    name: Test
    needs: [lint]
    strategy:
      matrix:
        pyver: ['3.7', '3.8', '3.9', '3.10']
        os: [ubuntu, macos, windows]
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python ${{ matrix.pyver }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.pyver }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.pyver }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
          pip-ci-${{ runner.os }}-${{ matrix.pyver }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v3
      with:
        path: requirements/dev.txt
    - name: Run unittests
      env:
        COLOR: yes
      run: |
        python -m pytest tests -vv
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v2.1.0
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  test-summary:
    name: Test matrix status
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Placeholder
      run: |
        true

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test-summary
    # Run only on pushing a tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v3
    - name: Install dependencies
      run: python -m pip install -U pip wheel
    - name: Make dists
      run: python setup.py sdist bdist_wheel
    - name: Release
      uses: aio-libs/create-release@v1.6.4
      with:
        changes_file: CHANGES.rst
        name: aiosignal
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_TOKEN }}
        artifact: ''
        version_file: aiosignal/__init__.py
        fix_issue_regex: "\n?\\s*`#(\\d+) <https://github.com/aio-libs/aiosignal/issues/\\1>`_"
        fix_issue_repl: ' (#\1)'
